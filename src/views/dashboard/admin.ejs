<!DOCTYPE html>
<html lang="en">

  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= initialData.csrfToken %>">
    <title><%= title %></title>

    <!-- Theme CSS -->
    <link rel="stylesheet" href="/public/css/theme.css" />

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
    // Configure Tailwind with our custom theme colors
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            "dark-bg": "#1a1a1a",
            "dark-card": "#2a2a2a",
            "dark-border": "#3a3a3a",
          },
        },
      },
    };
  </script>
  </head>

  <body class="bg-dark-bg text-gray-100">
    <div class="min-h-screen flex flex-col">
      <!-- Header -->
      <header class="bg-dark-card border-b border-dark-border text-white shadow-lg sticky top-0 z-40">
        <div class="px-6 py-4">
          <div class="flex justify-between items-center">
            <div class="flex items-center">
              <h1 class="text-2xl font-bold text-white">Admin Dashboard - User Management</h1>
            </div>
            <div class="flex items-center space-x-4">
              <div class="text-sm text-gray-300">
                Session expires in: <span id="session-timer">15:00</span>
              </div>
              <button id="logout-btn"
                class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded transition-colors">
                Logout
              </button>
            </div>
          </div>
        </div>
      </header>

      <!-- Main Content Area -->
      <main class="flex-1 px-6 py-6 max-w-full">
        <!-- Action Bar -->
        <div class="bg-dark-card rounded-lg border border-dark-border mb-6 p-4">
          <div class="flex justify-between items-center w-full">
            <div class="flex gap-4 items-center flex-1">
              <!-- Search Input -->
              <input type="text" id="search-input" placeholder="Search by username..."
                class="px-4 py-2 bg-dark-bg border border-dark-border rounded-lg w-64 text-gray-100 placeholder-gray-500 focus:outline-none focus:border-blue-500">

              <!-- Tag Filter (Custom Dropdown with Checkboxes) -->
              <div class="relative" id="tagDropdownContainer" style="min-width: 160px;">
                <button type="button" id="tagDropdownButton"
                  class="px-4 py-2 bg-dark-bg border border-dark-border rounded-lg text-gray-100 hover:border-blue-500 focus:outline-none focus:border-blue-500 flex items-center gap-2 w-full">
                  <span id="tagButtonText">All Tags</span>
                  <svg class="w-4 h-4 ml-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>
                <div id="tagDropdownMenu"
                  class="hidden absolute z-10 mt-1 bg-dark-card border border-dark-border rounded-lg shadow-lg"
                  style="min-width: 200px; max-height: 300px; overflow-y: auto;">
                  <% if (initialData.tags && initialData.tags.length > 0) { %>
                  <div class="p-2">
                    <% initialData.tags.forEach(tag => { %>
                    <label class="flex items-center gap-2 px-2 py-1 hover:bg-gray-800 rounded cursor-pointer">
                      <input type="checkbox" name="tags" value="<%= tag %>"
                        class="tag-checkbox-dropdown rounded border-gray-600 text-blue-500 focus:ring-blue-500 focus:ring-offset-0 bg-gray-700">
                      <span class="tag-label-dropdown text-gray-300 text-sm px-2 py-1 rounded-full"
                        data-tag="<%= tag %>"><%= tag %></span>
                    </label>
                    <% }) %>
                  </div>
                  <div id="clearTagsSection" class="hidden p-2 border-t border-dark-border">
                    <button type="button" id="clearTagsButton"
                      class="w-full px-3 py-1.5 bg-gray-800 hover:bg-gray-700 text-gray-300 text-sm rounded-lg transition-colors flex items-center justify-center gap-2">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12">
                        </path>
                      </svg>
                      Clear all tags
                    </button>
                  </div>
                  <% } else { %>
                  <div class="p-3 text-gray-500 text-sm">No tags available</div>
                  <% } %>
                </div>
              </div>

              <!-- Sort By -->
              <div class="custom-select-wrapper" style="min-width: 160px;">
                <select id="sort-by"
                  class="px-4 py-2 bg-dark-bg border border-dark-border rounded-lg text-gray-100 focus:outline-none focus:border-blue-500">
                  <option value="createdAt">Created Date</option>
                  <option value="updatedAt">Updated Date</option>
                  <option value="username">Username</option>
                </select>
                <div class="select-arrow">
                  <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </div>
              </div>

              <!-- Order -->
              <div class="custom-select-wrapper" style="min-width: 160px;">
                <select id="sort-order"
                  class="px-4 py-2 bg-dark-bg border border-dark-border rounded-lg text-gray-100 focus:outline-none focus:border-blue-500">
                  <option value="desc">Descending</option>
                  <option value="asc">Ascending</option>
                </select>
                <div class="select-arrow">
                  <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </div>
              </div>

              <!-- Loading Indicator (inline) -->
              <div id="loading-indicator" class="hidden flex items-center gap-2 text-blue-400">
                <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
                <span class="text-sm">Loading...</span>
              </div>
            </div>
            <div class="flex-shrink-0">
              <button id="create-user-btn"
                class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors whitespace-nowrap">
                Create User
              </button>
            </div>
          </div>
        </div>

        <!-- Users Table -->
        <div class="bg-dark-card rounded-lg border border-dark-border overflow-hidden">
          <div class="overflow-x-auto">
            <table id="users-table" class="w-full table-auto">
              <thead class="bg-dark-bg border-b border-dark-border">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    ID
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Username
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Tags
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Created At
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody class="bg-dark-card divide-y divide-dark-border">
                <!-- Users will be loaded client-side -->
              </tbody>
            </table>
          </div>

          <!-- Pagination Controls -->
          <div id="pagination-controls" class="bg-dark-bg border-t border-dark-border px-6 py-3">
            <!-- Pagination will be rendered here -->
          </div>
        </div>
      </main>
    </div>

    <!-- Modals -->

    <!-- Create User Modal -->
    <div id="createUserModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
      <div class="bg-dark-card border border-dark-border rounded-lg shadow-xl w-full max-w-md mx-4">
        <div class="p-6">
          <h3 class="text-xl font-bold mb-4 text-white">Create New User</h3>
          <form id="createUserForm">
            <div class="mb-4">
              <label for="newUsername" class="block text-sm font-medium text-gray-300 mb-2">Username</label>
              <input type="text" id="newUsername" required pattern="[a-z0-9_\\-]+" minlength="3" maxlength="50"
                class="w-full px-3 py-2 bg-dark-bg border border-dark-border rounded-lg text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Enter username (lowercase, numbers, hyphens, underscores)">
              <p class="text-xs text-gray-400 mt-1">3-50 characters, lowercase letters, numbers, hyphens,
                and underscores only</p>
            </div>
            <div class="mb-4">
              <label for="newUserTags" class="block text-sm font-medium text-gray-300 mb-2">Tags
                (Optional)</label>
              <input type="text" id="newUserTags"
                class="w-full px-3 py-2 bg-dark-bg border border-dark-border rounded-lg text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Enter tags separated by commas">
              <p class="text-xs text-gray-400 mt-1">Optional: Add tags to categorize this user</p>
            </div>
            <div class="flex justify-end gap-3">
              <button type="button" id="cancel-create-user-btn"
                class="px-4 py-2 text-gray-400 hover:text-gray-200 transition-colors">
                Cancel
              </button>
              <button type="submit"
                class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                Create User
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Manage Tags Modal -->
    <div id="manageTagsModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
      <div class="bg-dark-card border border-dark-border rounded-lg shadow-xl w-full max-w-md mx-4">
        <div class="p-6">
          <h3 class="text-xl font-bold mb-4 text-white">
            Manage Tags for <span id="tagModalUsername" class="text-blue-400"></span>
          </h3>
          <form id="manageTagsForm">
            <div class="mb-4">
              <label class="block text-sm font-medium text-gray-300 mb-2">Current Tags</label>
              <div id="currentTagsList" class="mb-3 min-h-[40px] flex flex-wrap gap-2 items-start">
                <!-- Tags will be rendered here -->
              </div>
            </div>
            <div class="mb-4">
              <label class="block text-sm font-medium text-gray-300 mb-2">Update Tags</label>
              <input type="text" id="updatedTags"
                class="w-full px-3 py-2 bg-dark-bg border border-dark-border rounded-lg text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Enter tags separated by commas">
              <p class="text-xs text-gray-400 mt-1">Leave empty to remove all tags</p>
            </div>
            <div class="flex justify-end gap-3">
              <button type="button" id="cancel-manage-tags-btn"
                class="px-4 py-2 text-gray-400 hover:text-gray-200 transition-colors">
                Cancel
              </button>
              <button type="submit"
                class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                Update Tags
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmationModal"
      class="fixed inset-0 bg-black bg-opacity-75 z-[60] flex items-center justify-center hidden">
      <div class="bg-dark-card border border-dark-border rounded-lg shadow-xl w-full max-w-md mx-4 p-6">
        <h3 id="confirmationTitle" class="text-xl font-bold mb-4 text-white">Confirm Action</h3>
        <p id="confirmationMessage" class="text-gray-300 mb-6">Are you sure you want to proceed?</p>
        <div class="flex justify-end gap-3">
          <button id="confirmationCancelBtn"
            class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors">
            Cancel
          </button>
          <button id="confirmationConfirmBtn"
            class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors">
            Confirm
          </button>
        </div>
      </div>
    </div>

    <!-- Session Expired Modal -->
    <div id="sessionExpiredModal"
      class="fixed inset-0 bg-black bg-opacity-75 z-[70] flex items-center justify-center hidden">
      <div class="bg-dark-card border border-dark-border rounded-lg shadow-xl w-full max-w-md mx-4 p-6">
        <div class="text-center">
          <svg class="mx-auto h-12 w-12 text-yellow-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <h3 class="text-xl font-bold mb-2 text-white">Session Expired</h3>
          <p class="text-gray-300 mb-6">Your session has expired. Please log in again to continue.</p>
          <div class="flex justify-center">
            <button id="sessionExpiredOkBtn"
              class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
              OK
            </button>
          </div>
          <p class="text-sm text-gray-400 mt-3">Redirecting in <span id="redirectCountdown">3</span> seconds...</p>
        </div>
      </div>
    </div>

    <!-- Include API Key Modal and Toast partials -->
    <%- include('../partials/admin/api-key-modal') %>
    <%- include('../partials/admin/toast-notification') %>

    <!-- JavaScript Dependencies -->
    <script src="/public/js/tag-colors.js"></script>
    <script src="/public/js/loading-manager.js"></script>
    <script src="/public/js/admin-api-client.js"></script>
    <script src="/public/js/template-loader.js"></script>
    <script src="/public/js/admin-ui-manager.js"></script>

    <!-- Initialize Admin UI -->
    <script>
    // Initialize with data from server
    const initialData = <%- JSON.stringify({
      tags: initialData.tags,
      sessionTimeout: initialData.sessionTimeout,
      csrfToken: initialData.csrfToken,
      pageSize: initialData.pageSize,
      pageSizes: initialData.pageSizes
    }) %>;

    // Session timer
    let sessionTimeout = initialData.sessionTimeout;
    let timeRemaining = sessionTimeout;

    function updateSessionTimer() {
      const minutes = Math.floor(timeRemaining / 60);
      const seconds = timeRemaining % 60;
      document.getElementById('session-timer').textContent =
        `${minutes}:${seconds.toString().padStart(2, '0')}`;

      if (timeRemaining > 0) {
        timeRemaining--;
        setTimeout(updateSessionTimer, 1000);
      } else {
        showSessionExpiredModal();
      }
    }

    function showSessionExpiredModal() {
      const modal = document.getElementById('sessionExpiredModal');
      const countdownEl = document.getElementById('redirectCountdown');
      const okBtn = document.getElementById('sessionExpiredOkBtn');

      if (modal) {
        modal.classList.remove('hidden');

        // Auto-redirect countdown
        let countdown = 3;
        const countdownInterval = setInterval(() => {
          countdown--;
          if (countdownEl) {
            countdownEl.textContent = countdown.toString();
          }
          if (countdown <= 0) {
            clearInterval(countdownInterval);
            window.location.href = '/dashboard/admin';
          }
        }, 1000);

        // OK button handler
        if (okBtn) {
          okBtn.onclick = () => {
            clearInterval(countdownInterval);
            window.location.href = '/dashboard/admin';
          };
        }
      }
    }

    updateSessionTimer();

    // Initialize the Admin UI Manager
    let adminUI;
    document.addEventListener('DOMContentLoaded', async () => {
      // Apply colors to tag filter checkboxes (in dropdown)
      document.querySelectorAll('.tag-label-dropdown[data-tag]').forEach(tagElement => {
        const tag = tagElement.dataset.tag;
        const color = window.TagColors.getTagColor(tag);
        tagElement.classList.add(color.bg, color.text, 'border', color.border);
      });

      const apiClient = new AdminApiClient();
      const templateLoader = await new TemplateLoader().init();

      // Create UI manager with template support
      adminUI = new AdminUIManager(apiClient, templateLoader, initialData.pageSize, initialData.pageSizes);

      // Make adminUI globally accessible for onclick handlers
      window.adminUI = adminUI;

      // Sync initial filter values from HTML dropdowns
      const sortByEl = document.getElementById('sort-by');
      const sortOrderEl = document.getElementById('sort-order');

      if (sortByEl) adminUI.sortBy = sortByEl.value;
      if (sortOrderEl) adminUI.sortOrder = sortOrderEl.value;
      // Page limit defaults to 20 as set in adminUI constructor

      // Load initial data after everything is set up
      // This will fetch users with proper filters and render with correct colors
      adminUI.loadInitialData();

      // Initialize button event listeners
      document.getElementById('create-user-btn')?.addEventListener('click', () => {
        adminUI.showCreateUserModal();
      });

      document.getElementById('cancel-create-user-btn')?.addEventListener('click', () => {
        adminUI.closeCreateUserModal();
      });

      document.getElementById('cancel-manage-tags-btn')?.addEventListener('click', () => {
        adminUI.closeManageTagsModal();
      });

      document.getElementById('copyApiKeyBtn')?.addEventListener('click', () => {
        adminUI.copyApiKey();
      });

      document.getElementById('closeApiKeyBtn')?.addEventListener('click', async () => {
        await adminUI.closeApiKeyModal();
      });

      // ESC key to close modals and dropdowns
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' || e.keyCode === 27) {
          // First check if tag dropdown is open
          const tagDropdownMenu = document.getElementById('tagDropdownMenu');
          if (tagDropdownMenu && !tagDropdownMenu.classList.contains('hidden')) {
            tagDropdownMenu.classList.add('hidden');
            return; // Close dropdown and stop
          }

          // Check and close any open modal
          const createUserModal = document.getElementById('createUserModal');
          const manageTagsModal = document.getElementById('manageTagsModal');
          const apiKeyModal = document.getElementById('apiKeyModal');
          const confirmationModal = document.getElementById('confirmationModal');
          const sessionExpiredModal = document.getElementById('sessionExpiredModal');

          // Close modals in priority order (most specific first)
          if (confirmationModal && !confirmationModal.classList.contains('hidden')) {
            // Trigger cancel action for confirmation modal
            document.getElementById('confirmationCancelBtn')?.click();
          } else if (apiKeyModal && !apiKeyModal.classList.contains('hidden')) {
            adminUI.closeApiKeyModal();
          } else if (manageTagsModal && !manageTagsModal.classList.contains('hidden')) {
            adminUI.closeManageTagsModal();
          } else if (createUserModal && !createUserModal.classList.contains('hidden')) {
            adminUI.closeCreateUserModal();
          }
          // Note: Session expired modal should not be closeable with ESC
        }
      });

      // Initialize search input with debouncing
      let searchTimeout;
      const searchInput = document.getElementById('search-input');
      if (searchInput) {
        searchInput.addEventListener('input', (e) => {
          clearTimeout(searchTimeout);
          const searchValue = e.target.value.trim();

          // Debounce search by 300ms
          searchTimeout = setTimeout(() => {
            adminUI.searchTerm = searchValue;
            adminUI.currentPage = 1; // Reset to first page on search
            adminUI.loadUsers();
          }, 300);
        });
      }

      // Initialize sort and filter controls
      document.getElementById('sort-by')?.addEventListener('change', (e) => {
        adminUI.sortBy = e.target.value;
        adminUI.currentPage = 1;
        adminUI.loadUsers();
      });

      document.getElementById('sort-order')?.addEventListener('change', (e) => {
        adminUI.sortOrder = e.target.value;
        adminUI.currentPage = 1;
        adminUI.loadUsers();
      });

      // Handle custom tag dropdown
      const tagDropdownButton = document.getElementById('tagDropdownButton');
      const tagDropdownMenu = document.getElementById('tagDropdownMenu');
      const tagButtonText = document.getElementById('tagButtonText');
      const clearTagsSection = document.getElementById('clearTagsSection');

      if (tagDropdownButton && tagDropdownMenu) {
        // Toggle dropdown on button click
        tagDropdownButton.addEventListener('click', function (e) {
          e.stopPropagation();
          tagDropdownMenu.classList.toggle('hidden');
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', function (e) {
          if (!tagDropdownButton.contains(e.target) && !tagDropdownMenu.contains(e.target)) {
            tagDropdownMenu.classList.add('hidden');
          }
        });

        // Handle checkbox changes
        const tagCheckboxes = document.querySelectorAll('.tag-checkbox-dropdown');
        tagCheckboxes.forEach(checkbox => {
          checkbox.addEventListener('change', function () {
            // Get all checked tags
            const checkedTags = Array.from(document.querySelectorAll('.tag-checkbox-dropdown:checked'))
              .map(cb => cb.value);

            // Update adminUI state
            adminUI.selectedTags = checkedTags;
            adminUI.currentPage = 1;

            // Update button text
            const checkedCount = checkedTags.length;
            if (checkedCount > 0) {
              tagButtonText.textContent = `${checkedCount} tag${checkedCount > 1 ? 's' : ''} selected`;
              // Show clear button
              if (clearTagsSection) {
                clearTagsSection.classList.remove('hidden');
              }
            } else {
              tagButtonText.textContent = 'All Tags';
              // Hide clear button
              if (clearTagsSection) {
                clearTagsSection.classList.add('hidden');
              }
            }

            // Load users with new filter
            adminUI.loadUsers();
          });
        });

        // Handle clear tags button
        const clearTagsButton = document.getElementById('clearTagsButton');
        if (clearTagsButton) {
          clearTagsButton.addEventListener('click', function (e) {
            e.preventDefault();
            e.stopPropagation();

            // Uncheck all tag checkboxes
            tagCheckboxes.forEach(checkbox => {
              checkbox.checked = false;
            });

            // Clear adminUI state
            adminUI.selectedTags = [];
            adminUI.currentPage = 1;

            // Update button text
            tagButtonText.textContent = 'All Tags';

            // Hide clear button
            if (clearTagsSection) {
              clearTagsSection.classList.add('hidden');
            }

            // Reload users
            adminUI.loadUsers();
          });
        }
      }

      // Pagination will be rendered when users are loaded
    });
  </script>
  </body>

</html>
