<div class="space-y-6">
	<!-- Header -->
	<div class="mb-6">
		<h1 class="text-3xl font-semibold text-white mb-6">Cost</h1>

		<!-- Filters -->
		<div class="flex flex-wrap gap-3">
			<form method="GET" action="/dashboard" class="flex flex-wrap gap-3">
				<!-- Group By -->
				<select name="groupBy" onchange="this.form.submit()"
				 class="px-4 py-2 bg-dark-card border border-dark-border rounded-lg text-gray-300 focus:outline-none focus:border-blue-500">
					<option value="user">Group by: User</option>
					<option value="model">Group by: Model</option>
					<option value="date">Group by: Date</option>
				</select>

				<!-- Period Filter -->
				<select name="period" onchange="this.form.submit()"
				 class="px-4 py-2 bg-dark-card border border-dark-border rounded-lg text-gray-300 focus:outline-none focus:border-blue-500">
					<option value="week" <%= query.period === 'week' ? 'selected' : '' %>>Last Week</option>
					<option value="month" <%= query.period === 'month' ? 'selected' : '' %>>This Month</option>
					<option value="all" <%= query.period === 'all' ? 'selected' : '' %>>All Time</option>
				</select>

				<!-- User Filter -->
				<select name="user" onchange="this.form.submit()"
				 class="px-4 py-2 bg-dark-card border border-dark-border rounded-lg text-gray-300 focus:outline-none focus:border-blue-500">
					<option value="">All Users</option>
					<% if (filters.users && filters.users.length > 0) { %>
					<% filters.users.forEach(user => { %>
					<option value="<%= user %>" <%= query.user === user ? 'selected' : '' %>><%= user %></option>
					<% }) %>
					<% } %>
				</select>

				<!-- Model Filter -->
				<select name="model" onchange="this.form.submit()"
				 class="px-4 py-2 bg-dark-card border border-dark-border rounded-lg text-gray-300 focus:outline-none focus:border-blue-500">
					<option value="">All Models</option>
					<% if (filters.models && filters.models.length > 0) { %>
					<% filters.models.forEach(model => { %>
					<option value="<%= model %>" <%= query.model === model ? 'selected' : '' %>><%= model %></option>
					<% }) %>
					<% } %>
				</select>

				<!-- Date Navigation -->
				<div class="flex items-center gap-2 ml-auto">
					<button type="button" class="p-2 text-gray-400 hover:text-white">
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7">
							</path>
						</svg>
					</button>
					<span class="text-gray-300 px-3">
						<%= new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' }) %>
					</span>
					<button type="button" class="p-2 text-gray-400 hover:text-white">
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7">
							</path>
						</svg>
					</button>
				</div>

				<!-- Export Button -->
				<button type="button" class="px-4 py-2 bg-white text-black rounded-lg hover:bg-gray-200 ml-4">
					ðŸ“¤ Export
				</button>
			</form>
		</div>
	</div>

	<%
    // Calculate summary statistics
    let totalTokenCost = 0;
    let uniqueUsers = new Set();
    let totalDays = 0;

    if (stats && stats.stats) {
        const uniqueDates = new Set();
        stats.stats.forEach(day => {
            totalTokenCost += day.totalCost || 0;
            uniqueUsers.add(day.username);
            uniqueDates.add(day.date);
        });
        totalDays = uniqueDates.size;
    }
    %>

	<!-- Total Cost Card -->
	<div class="flex justify-center">
		<div class="bg-dark-card rounded-xl p-8 max-w-md w-full">
			<div class="flex justify-between items-center">
				<div>
					<p class="text-gray-400 text-sm mb-3">Total token cost</p>
					<p class="text-5xl font-bold text-white">$<%= totalTokenCost.toFixed(2) %></p>
					<p class="text-gray-500 text-sm mt-2"><%= uniqueUsers.size %> users â€¢ <%= totalDays %> days</p>
				</div>
				<div class="chart-container-small">
					<canvas id="tokenCostDonut"></canvas>
				</div>
			</div>
		</div>
	</div>

	<!-- Daily Token Cost Chart -->
	<div class="bg-dark-card rounded-xl p-6">
		<div class="mb-4">
			<h3 class="text-lg font-semibold text-white">Daily token cost</h3>
			<p class="text-gray-400 text-sm">Includes token usage from both API and Console</p>
		</div>
		<div class="chart-container">
			<canvas id="dailyCostChart"></canvas>
		</div>

		<!-- Legend -->
		<div class="mt-4 flex flex-wrap gap-4 text-xs" id="chartLegend">
			<!-- Legend will be dynamically populated by JavaScript -->
		</div>
	</div>
</div>
</div>

<!-- Chart.js Scripts -->
<script>
// Chart defaults for dark theme
Chart.defaults.color = '#9CA3AF';
Chart.defaults.borderColor = '#3a3a3a';

// Pass server-side variables to client-side
const totalTokenCost = <%= totalTokenCost %>;
const stats = <%- JSON.stringify(stats) %>;
const chartData = <%- JSON.stringify(chartData) %>;

// Model colors mapping
const modelColors = {
    'anthropic/claude-3.5-sonnet': '#60A5FA',
    'anthropic/claude-3-opus': '#A78BFA',
    'anthropic/claude-3-haiku': '#34D399',
    'openai/gpt-4': '#F87171',
    'openai/gpt-3.5-turbo': '#FBBF24',
    'other': '#6B7280'
};

// Process data for charts (by user)
const processedData = {};
const allUsers = new Set();
const userTotals = {};

// Calculate user totals first for the donut chart
if (stats && stats.stats) {
    stats.stats.forEach(stat => {
        if (!userTotals[stat.username]) {
            userTotals[stat.username] = 0;
        }
        userTotals[stat.username] += stat.totalCost;
        allUsers.add(stat.username);
    });
}

// Define consistent colors for users
const userColorMap = {};
const colorPalette = [
    'rgba(96, 165, 250, 0.8)',   // blue
    'rgba(167, 139, 250, 0.8)',  // purple
    'rgba(52, 211, 153, 0.8)',   // green
    'rgba(248, 113, 113, 0.8)',  // red
    'rgba(251, 191, 36, 0.8)',   // amber
    'rgba(251, 146, 60, 0.8)',   // orange
    'rgba(244, 114, 182, 0.8)',  // pink
    'rgba(148, 163, 184, 0.8)',  // slate
];

// Assign colors to users
Array.from(allUsers).forEach((user, idx) => {
    userColorMap[user] = colorPalette[idx % colorPalette.length];
});

// Token Cost Donut Chart (by user)
const tokenCtx = document.getElementById('tokenCostDonut').getContext('2d');
new Chart(tokenCtx, {
    type: 'doughnut',
    data: {
        labels: Object.keys(userTotals),
        datasets: [{
            data: Object.values(userTotals),
            backgroundColor: Object.keys(userTotals).map(user => userColorMap[user]),
            borderWidth: 0,
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        cutout: '70%',
        plugins: {
            legend: { display: false },
            tooltip: {
                backgroundColor: '#1a1a1a',
                borderColor: '#3a3a3a',
                borderWidth: 1,
                callbacks: {
                    label: function(context) {
                        const user = context.label;
                        const value = context.parsed;
                        const percentage = ((value / totalTokenCost) * 100).toFixed(1);
                        return user + ': $' + value.toFixed(2) + ' (' + percentage + '%)';
                    }
                }
            }
        }
    }
});

// Process data for stacked bar chart (by user)
if (stats && stats.stats) {
    stats.stats.forEach(stat => {
        if (!processedData[stat.date]) {
            processedData[stat.date] = {};
        }
        // Group by username instead of model
        if (!processedData[stat.date][stat.username]) {
            processedData[stat.date][stat.username] = 0;
        }
        processedData[stat.date][stat.username] += stat.totalCost;
    });
}

// Get unique dates and sort them
const uniqueDates = Object.keys(processedData).sort();

// Create datasets for stacked bar chart (one dataset per user)
const datasets = Array.from(allUsers).map((user) => ({
    label: user,
    data: uniqueDates.map(date => processedData[date]?.[user] || 0),
    backgroundColor: userColorMap[user],
    borderWidth: 0,
}));

// Daily Cost Chart (Stacked Bar)
const dailyCtx = document.getElementById('dailyCostChart').getContext('2d');
new Chart(dailyCtx, {
    type: 'bar',
    data: {
        labels: uniqueDates.map(date => {
            const d = new Date(date);
            return d.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        }),
        datasets: datasets
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            x: {
                stacked: true,
                grid: { display: false },
                ticks: { color: '#9CA3AF' }
            },
            y: {
                stacked: true,
                beginAtZero: true,
                grid: { color: '#3a3a3a' },
                ticks: {
                    color: '#9CA3AF',
                    callback: function(value) {
                        return '$' + value.toFixed(0);
                    }
                }
            }
        },
        plugins: {
            legend: { display: false },
            tooltip: {
                backgroundColor: '#1a1a1a',
                borderColor: '#3a3a3a',
                borderWidth: 1,
                mode: 'index',
                intersect: false,
                callbacks: {
                    title: function(tooltipItems) {
                        return tooltipItems[0].label;
                    },
                    label: function(context) {
                        const user = context.dataset.label;
                        const value = context.parsed.y;
                        if (value > 0) {
                            return user + ': $' + value.toFixed(2);
                        }
                        return null; // Don't show users with $0
                    },
                    footer: function(tooltipItems) {
                        let sum = 0;
                        tooltipItems.forEach(function(tooltipItem) {
                            sum += tooltipItem.parsed.y;
                        });
                        return 'Total: $' + sum.toFixed(2);
                    }
                }
            }
        }
    }
});

// Populate the legend
const legendContainer = document.getElementById('chartLegend');
Array.from(allUsers).forEach((user) => {
    const legendItem = document.createElement('div');
    legendItem.className = 'flex items-center gap-2';

    const colorBox = document.createElement('span');
    colorBox.className = 'w-3 h-3 rounded';
    colorBox.style.backgroundColor = userColorMap[user];

    const label = document.createElement('span');
    label.className = 'text-gray-400';
    label.textContent = user;

    legendItem.appendChild(colorBox);
    legendItem.appendChild(label);
    legendContainer.appendChild(legendItem);
});

// Helper function for colors
function getColor(index, alpha = 1) {
    const colors = [
        `rgba(96, 165, 250, ${alpha})`,   // blue
        `rgba(167, 139, 250, ${alpha})`,  // purple
        `rgba(52, 211, 153, ${alpha})`,   // green
        `rgba(248, 113, 113, ${alpha})`,  // red
        `rgba(251, 191, 36, ${alpha})`,   // amber
        `rgba(251, 146, 60, ${alpha})`,   // orange
        `rgba(244, 114, 182, ${alpha})`,  // pink
        `rgba(148, 163, 184, ${alpha})`,  // slate
    ];
    return colors[index % colors.length];
}
</script>
