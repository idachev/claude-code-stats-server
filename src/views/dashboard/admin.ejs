<!DOCTYPE html>
<html lang="en">

  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= initialData.csrfToken %>">
    <title><%= title %></title>

    <!-- Theme CSS -->
    <link rel="stylesheet" href="/public/css/theme.css" />

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
		// Configure Tailwind with our custom theme colors
		tailwind.config = {
			theme: {
				extend: {
					colors: {
						"dark-bg": "#1a1a1a",
						"dark-card": "#2a2a2a",
						"dark-border": "#3a3a3a",
					},
				},
			},
		};
	</script>
  </head>

  <body class="bg-dark-bg text-gray-100">
    <div class="min-h-screen flex flex-col">
      <!-- Header -->
      <header class="bg-dark-card border-b border-dark-border text-white shadow-lg sticky top-0 z-40">
        <div class="px-6 py-4">
          <div class="flex justify-between items-center">
            <div class="flex items-center">
              <h1 class="text-2xl font-bold text-white">Admin Dashboard - User Management</h1>
            </div>
            <div class="flex items-center space-x-4">
              <div class="text-sm text-gray-300">
                Session expires in: <span id="session-timer">15:00</span>
              </div>
              <button id="logout-btn"
                class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded transition-colors">
                Logout
              </button>
            </div>
          </div>
        </div>
      </header>

      <!-- Main Content Area -->
      <main class="flex-1 px-6 py-6 max-w-full">
        <!-- Action Bar -->
        <div class="bg-dark-card rounded-lg border border-dark-border mb-6 p-4">
          <div class="flex justify-between items-center">
            <div class="flex gap-4 items-center">
              <!-- Search Input -->
              <input type="text" id="search-input" placeholder="Search by username..."
                class="px-4 py-2 bg-dark-bg border border-dark-border rounded-lg w-64 text-gray-100 placeholder-gray-500 focus:outline-none focus:border-blue-500">

              <!-- Tag Filter -->
              <select id="tag-filter"
                class="px-4 py-2 bg-dark-bg border border-dark-border rounded-lg text-gray-100 focus:outline-none focus:border-blue-500">
                <option value="">All Tags</option>
                <% initialData.tags.forEach(tag => { %>
                <option value="<%= tag %>"><%= tag %></option>
                <% }); %>
              </select>

              <!-- Advanced Filters Toggle -->
              <button id="advanced-filters-btn"
                class="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors">
                Advanced Filters
              </button>

              <!-- Loading Indicator (inline) -->
              <div id="loading-indicator" class="hidden flex items-center gap-2 text-blue-400">
                <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
                <span class="text-sm">Loading...</span>
              </div>
            </div>
            <button id="create-user-btn"
              class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors">
              + Create User
            </button>
          </div>

          <!-- Advanced Filters Panel (Hidden by default) -->
          <div id="advanced-filters" class="hidden mt-4 pt-4 border-t border-dark-border">
            <div class="grid grid-cols-3 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1">Sort By</label>
                <select id="sort-by"
                  class="w-full px-3 py-2 bg-dark-bg border border-dark-border rounded-lg text-gray-100">
                  <option value="createdAt">Created Date</option>
                  <option value="updatedAt">Updated Date</option>
                  <option value="username">Username</option>
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1">Order</label>
                <select id="sort-order"
                  class="w-full px-3 py-2 bg-dark-bg border border-dark-border rounded-lg text-gray-100">
                  <option value="desc">Descending</option>
                  <option value="asc">Ascending</option>
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1">Items Per Page</label>
                <select id="page-limit"
                  class="w-full px-3 py-2 bg-dark-bg border border-dark-border rounded-lg text-gray-100">
                  <option value="10">10</option>
                  <option value="20" selected>20</option>
                  <option value="50">50</option>
                  <option value="100">100</option>
                </select>
              </div>
            </div>
            <div class="mt-4">
              <label class="block text-sm font-medium text-gray-300 mb-1">Filter by Multiple Tags
                (AND)</label>
              <div id="tag-multi-select" class="flex flex-wrap gap-2">
                <% initialData.tags.forEach(tag => { %>
                <label class="inline-flex items-center">
                  <input type="checkbox" class="tag-checkbox" value="<%= tag %>"
                    class="mr-2 rounded bg-dark-bg border-gray-600 text-blue-600 focus:ring-blue-500">
                  <span class="px-2 py-1 text-xs rounded-full bg-blue-600/20 text-blue-400 border border-blue-600/30">
                    <%= tag %>
                  </span>
                </label>
                <% }); %>
              </div>
            </div>
          </div>
        </div>

        <!-- Users Table -->
        <div class="bg-dark-card rounded-lg border border-dark-border overflow-hidden">
          <div class="overflow-x-auto">
            <table id="users-table" class="w-full table-auto">
              <thead class="bg-dark-bg border-b border-dark-border">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    ID
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Username
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Tags
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Created At
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody class="bg-dark-card divide-y divide-dark-border">
                <!-- Initial server-rendered rows -->
                <% initialData.users.forEach(user => { %>
                <%- include('../partials/admin/user-row', { user }) %>
                <% }); %>
              </tbody>
            </table>
          </div>

          <!-- Pagination Controls -->
          <div id="pagination-controls" class="bg-dark-bg border-t border-dark-border px-6 py-3">
            <!-- Pagination will be rendered here -->
          </div>
        </div>
      </main>
    </div>

    <!-- Modals -->

    <!-- Create User Modal -->
    <div id="createUserModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
      <div class="bg-dark-card border border-dark-border rounded-lg shadow-xl w-full max-w-md mx-4">
        <div class="p-6">
          <h3 class="text-xl font-bold mb-4 text-white">Create New User</h3>
          <form id="createUserForm">
            <div class="mb-4">
              <label for="newUsername" class="block text-sm font-medium text-gray-300 mb-2">Username</label>
              <input type="text" id="newUsername" required pattern="[a-z0-9_\\-]+" minlength="3" maxlength="50"
                class="w-full px-3 py-2 bg-dark-bg border border-dark-border rounded-lg text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Enter username (lowercase, numbers, hyphens, underscores)">
              <p class="text-xs text-gray-400 mt-1">3-50 characters, lowercase letters, numbers, hyphens,
                and underscores only</p>
            </div>
            <div class="mb-4">
              <label for="newUserTags" class="block text-sm font-medium text-gray-300 mb-2">Tags
                (Optional)</label>
              <input type="text" id="newUserTags"
                class="w-full px-3 py-2 bg-dark-bg border border-dark-border rounded-lg text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Enter tags separated by commas">
              <p class="text-xs text-gray-400 mt-1">Optional: Add tags to categorize this user</p>
            </div>
            <div class="flex justify-end gap-3">
              <button type="button" id="cancel-create-user-btn"
                class="px-4 py-2 text-gray-400 hover:text-gray-200 transition-colors">
                Cancel
              </button>
              <button type="submit"
                class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                Create User
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Manage Tags Modal -->
    <div id="manageTagsModal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
      <div class="bg-dark-card border border-dark-border rounded-lg shadow-xl w-full max-w-md mx-4">
        <div class="p-6">
          <h3 class="text-xl font-bold mb-4 text-white">
            Manage Tags for <span id="tagModalUsername" class="text-blue-400"></span>
          </h3>
          <form id="manageTagsForm">
            <div class="mb-4">
              <label class="block text-sm font-medium text-gray-300 mb-2">Current Tags</label>
              <div id="currentTagsList" class="mb-3 min-h-[40px]">
                <!-- Tags will be rendered here -->
              </div>
            </div>
            <div class="mb-4">
              <label class="block text-sm font-medium text-gray-300 mb-2">Update Tags</label>
              <input type="text" id="updatedTags"
                class="w-full px-3 py-2 bg-dark-bg border border-dark-border rounded-lg text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Enter tags separated by commas">
              <p class="text-xs text-gray-400 mt-1">Leave empty to remove all tags</p>
            </div>
            <div class="flex justify-end gap-3">
              <button type="button" id="cancel-manage-tags-btn"
                class="px-4 py-2 text-gray-400 hover:text-gray-200 transition-colors">
                Cancel
              </button>
              <button type="submit"
                class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                Update Tags
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmationModal"
      class="fixed inset-0 bg-black bg-opacity-75 z-[60] flex items-center justify-center hidden">
      <div class="bg-dark-card border border-dark-border rounded-lg shadow-xl w-full max-w-md mx-4 p-6">
        <h3 id="confirmationTitle" class="text-xl font-bold mb-4 text-white">Confirm Action</h3>
        <p id="confirmationMessage" class="text-gray-300 mb-6">Are you sure you want to proceed?</p>
        <div class="flex justify-end gap-3">
          <button id="confirmationCancelBtn"
            class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors">
            Cancel
          </button>
          <button id="confirmationConfirmBtn"
            class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors">
            Confirm
          </button>
        </div>
      </div>
    </div>

    <!-- Include API Key Modal and Toast partials -->
    <%- include('../partials/admin/api-key-modal') %>
    <%- include('../partials/admin/toast-notification') %>

    <!-- JavaScript Dependencies -->
    <script src="/public/js/loading-manager.js"></script>
    <script src="/public/js/admin-api-client.js"></script>
    <script src="/public/js/template-loader.js"></script>
    <script src="/public/js/admin-ui-manager.js"></script>

    <!-- Initialize Admin UI -->
    <script>
		// Initialize with server-rendered data
		const initialData = <%- JSON.stringify({
			users: initialData.users,
			tags: initialData.tags,
			sessionTimeout: initialData.sessionTimeout,
			pagination: {
				page: 1,
				limit: 20,
				total: initialData.users.length,
				totalPages: Math.ceil(initialData.users.length / 20)
			}
		}) %>;

		// Session timer
		let sessionTimeout = initialData.sessionTimeout;
		let timeRemaining = sessionTimeout;

		function updateSessionTimer() {
			const minutes = Math.floor(timeRemaining / 60);
			const seconds = timeRemaining % 60;
			document.getElementById('session-timer').textContent =
				`${minutes}:${seconds.toString().padStart(2, '0')}`;

			if (timeRemaining > 0) {
				timeRemaining--;
				setTimeout(updateSessionTimer, 1000);
			} else {
				alert('Session expired. Please login again.');
				window.location.href = '/dashboard/admin';
			}
		}

		updateSessionTimer();

		// Initialize the Admin UI Manager
		let adminUI;
		document.addEventListener('DOMContentLoaded', async () => {
			const apiClient = new AdminApiClient();
			const templateLoader = await new TemplateLoader().init();

			// Create enhanced UI manager with template support
			class EnhancedAdminUIManager extends AdminUIManager {
				constructor(apiClient, templateLoader) {
					super(apiClient);
					this.templates = templateLoader;
				}

				// Override render methods to use templates
				renderUsersTable(users) {
					const tbody = document.querySelector('#users-table tbody');
					if (!tbody) return;

					if (users.length === 0) {
						tbody.innerHTML = this.templates.renderEmptyState();
						return;
					}

					tbody.innerHTML = users.map(user => this.templates.renderUserRow(user)).join('');
				}

				renderPagination(pagination) {
					const container = document.getElementById('pagination-controls');
					if (!container) {
						return;
					}
					container.innerHTML = this.templates.renderPagination(pagination);
				}

				setLoading(loading) {
					this.isLoading = loading;
					const tbody = document.querySelector('#users-table tbody');
					if (loading && tbody) {
						tbody.innerHTML = this.templates.renderLoadingState();
					}
				}

				showToast(message, type = 'info') {
					const toastContainer = document.getElementById('toastContainer');
					if (!toastContainer) {
						// Fallback to parent implementation
						super.showToast(message, type);
						return;
					}

					const toast = this.templates.createToast(message, type);
					toastContainer.appendChild(toast);

					// Animate in
					setTimeout(() => {
						toast.classList.remove('translate-x-full');
						toast.classList.add('translate-x-0');
					}, 10);

					// Remove after delay
					setTimeout(() => {
						toast.classList.add('translate-x-full');
						setTimeout(() => toast.remove(), 300);
					}, 3000);
				}

				// Additional methods for API key modal
				showApiKeyModal(apiKey) {
					const modal = document.getElementById('apiKeyModal');
					const display = document.getElementById('apiKeyDisplay');

					if (modal && display) {
						display.textContent = apiKey;
						modal.classList.remove('hidden');
					} else {
						// Fallback to parent implementation
						super.showApiKeyModal(apiKey);
					}
				}

				closeApiKeyModal() {
					const modal = document.getElementById('apiKeyModal');
					if (modal) {
						modal.classList.add('hidden');
					}
				}

				async copyApiKey() {
					const display = document.getElementById('apiKeyDisplay');
					const btn = document.getElementById('copyApiKeyBtn');

					if (display && btn) {
						try {
							await navigator.clipboard.writeText(display.textContent);
							const originalText = btn.textContent;
							btn.textContent = 'Copied!';
							btn.classList.add('bg-green-600');

							setTimeout(() => {
								btn.textContent = originalText;
								btn.classList.remove('bg-green-600');
							}, 2000);
						} catch (error) {
							this.showError('Failed to copy to clipboard');
						}
					}
				}
			}

			adminUI = new EnhancedAdminUIManager(apiClient, templateLoader);

			// Make adminUI globally accessible for onclick handlers
			window.adminUI = adminUI;

			// Load initial data after everything is set up
			adminUI.loadInitialData();

			// Initialize button event listeners
			document.getElementById('create-user-btn')?.addEventListener('click', () => {
				adminUI.showCreateUserModal();
			});

			document.getElementById('cancel-create-user-btn')?.addEventListener('click', () => {
				adminUI.closeCreateUserModal();
			});

			document.getElementById('cancel-manage-tags-btn')?.addEventListener('click', () => {
				adminUI.closeManageTagsModal();
			});

			document.getElementById('copyApiKeyBtn')?.addEventListener('click', () => {
				adminUI.copyApiKey();
			});

			document.getElementById('closeApiKeyBtn')?.addEventListener('click', async () => {
				await adminUI.closeApiKeyModal();
			});

			// Initialize advanced filters toggle
			document.getElementById('advanced-filters-btn')?.addEventListener('click', () => {
				const panel = document.getElementById('advanced-filters');
				panel?.classList.toggle('hidden');
			});

			// Initialize sort and filter controls
			document.getElementById('sort-by')?.addEventListener('change', (e) => {
				adminUI.sortBy = e.target.value;
				adminUI.currentPage = 1;
				adminUI.loadUsers();
			});

			document.getElementById('sort-order')?.addEventListener('change', (e) => {
				adminUI.sortOrder = e.target.value;
				adminUI.currentPage = 1;
				adminUI.loadUsers();
			});

			document.getElementById('page-limit')?.addEventListener('change', (e) => {
				adminUI.pageLimit = parseInt(e.target.value);
				adminUI.currentPage = 1;
				adminUI.loadUsers();
			});

			// Multi-tag filter
			document.querySelectorAll('.tag-checkbox').forEach(checkbox => {
				checkbox.addEventListener('change', () => {
					const checkedTags = Array.from(document.querySelectorAll('.tag-checkbox:checked'))
						.map(cb => cb.value);
					adminUI.selectedTags = checkedTags;
					adminUI.currentPage = 1;
					adminUI.loadUsers();
				});
			});

			// Render initial pagination if we have server-rendered data
			if (initialData.pagination) {
				adminUI.renderPagination(initialData.pagination);
			}
		});
	</script>
  </body>

</html>
